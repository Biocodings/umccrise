""" Patient analysis pipeline
"""
import os
from os.path import join
from umccrise.utils import get_loc, get_sample_name
from ngs_utils.file_utils import splitext_plus
from ngs_utils.bcbio import BcbioProject
from ngs_utils.file_utils import add_suffix, get_ungz_gz

cov_by_phenotype = config.get('cov_by_phenotype', {
  'tumor': 30,
  'normal': 10,
})

bb = BcbioProject(config['run_dir'])
batch_by_name = bb.batch_by_name
if 'batch' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if k == config['batch']}

loc = get_loc()
az300 = join(loc.hsapiens, 'GRCh37/coverage/prioritize/cancer/az300.bed.gz')
ref_fasta = join(loc.hsapiens, 'GRCh37/seq/GRCh37.fa')

threads_max = 32


rule all:
    input:
        expand(
                expand('umccrised/coverage/{{batch}}/{phenotype}.callable.bed', phenotype=['tumor', 'normal']) +
                expand('umccrised/pcgr/{{batch}}-{caller}.vcf.gz', caller=list(batch_by_name.values())[0].tumor.variantcallers) +
                ['umccrised/indexcov/{batch}/index.html',
                 'umccrised/pcgr/{batch}-germline-ensemble-cancer-chroms.vcf.gz',
                 'umccrised/pcgr/{batch}-cnvkit-pcgr.tsv',
                 'umccrised/rstudio/{batch}-ensemble-ucsf.vcf',
                 'umccrised/af/{batch}_af_vardict_tumor.txt',
                 'umccrised/af/{batch}_af_vardict_tumor_az300.txt',
                 'umccrised/structural/{batch}_cnvkit_diagram.done'
                 ],
            batch=batch_by_name.values()
        ) + 
        ['umccrised/qc/multiqc_report.html']


rule symlink_multiqc:
    input:
        join(bb.date_dir, 'multiqc/multiqc_report.html')
    output:
        'umccrised/qc/multiqc_report.html'
    shell:
        'ln -s {input} {output}'


## Cancer gene coverage
# Looking at coverage for a limited set of (cancer) genes to assess overall reliability. 
# Minimum coverage for normal is 10, 30 for cancer.
rule coverage:
    input:
        bam = lambda wc: {'tumor': batch_by_name[wc.batch].tumor.bam,
                          'normal': batch_by_name[wc.batch].normal.bam}[wc.phenotype],
        az300 = az300,
        ref_fasta = ref_fasta
    params:
        prefix = lambda wc, output: output[0].replace('.callable.bed', ''),
        cutoff = lambda wc: cov_by_phenotype[wc.phenotype]
    output:
        'umccrised/coverage/{batch}/{phenotype}.callable.bed'
    threads: threads_max
    shell:
        'goleft depth {input.bam} --reference {ref_fasta} --processes {threads} --bed {az300} --stats --mincov {params.cutoff} --prefix {params.prefix}'


# Also bringing in global coverage plots for review (tumor only, quick check for CNVs):
rule cov_plots:
    input:
        bam = lambda wc: batch_by_name[wc.batch].tumor.bam
    params:
        directory = 'umccrised/indexcov/{batch}'
    output:
        'umccrised/indexcov/{batch}/index.html'
    shell:
        'goleft indexcov --directory {params.directory} {input.bam}'


## Somatic calls
# Run ensemble and raw calls through PCGR and combine with the cnv calls:

# PCGR struggles with anything but the basic chromosome setup. It also ignores any variant not marked `PASS` so might as well remove others to save on transfer times:
rule pcgr_vcf:
    input:
        vcf = join(bb.date_dir, '{batch}-{caller}-annotated.vcf.gz')
    output:
        'umccrised/pcgr/{batch}-{caller}.vcf.gz'
    shell:
        'bcftools view -f .,PASS -r 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y {input.vcf} -Oz > {output}'

# PCGR also wants a slightly different format for the CNS data:
rule pcgr_cns:
    input:
        lambda wc: join(batch_by_name[wc.batch].tumor.dirpath, f'{wc.batch}-cnvkit.cns')
    output:
        'umccrised/pcgr/{batch}-cnvkit-pcgr.tsv'
    shell:
        'echo -e "Chromosome\tStart\tEnd\tSegment_Mean" > {output} && cat {input} | grep -v ^chromosome | cut -f 1,2,3,5 >> {output}'


# Ensemble calls to be submitted to CGI. Sharing functionality does not seem to work at this point. Ensemble calls only include variants that `PASS` so no additional filtering required.
# Finally, for the local analysis with MutationalPatterns generate UCSC-versions of the ensemble calls:
rule cgi:
    input:
        'umccrised/pcgr/{batch}-ensemble.vcf.gz'
    output:
        'umccrised/rstudio/{batch}-ensemble-ucsf.vcf'
    shell:
        'cat {input}'
        ' | awk \'{ if($0 !~ /^#/) print "chr"$0; else if(match($0,/(##contig=<ID=)(.*)/,m)) print m[1]"chr"m[2]; else print $0 }\''
        ' | grep -v chrG > {output}'
# All done; file needs to be submitted to CGI and PCGR manually for now. 


## Allelic frequencies
# AF is not yet integrated into PCGR or CGI. We can extract those from VarDict or FreeBayes for plotting purposes, but still need to look up AF for genes of interest manually. Not entirely ideal but for a rough summary plot but this is going to be sufficient. Can revisit once we've unified AF information across callers:

rule af_freqs:
    input:
        vcf = join(bb.date_dir, '{batch}-vardict-annotated.vcf.gz'),
        az300 = az300
    params:
        tumor_name = lambda wc: batch_by_name[wc.batch].tumor.name
    output:
        af_vardict = 'umccrised/af/{batch}_af_vardict_tumor.txt',
        af_vardict_az300 = 'umccrised/af/{batch}_af_vardict_tumor_az300.txt'
    shell:
        'bcftools view -f .,PASS {input.vcf} | vawk \'{{ print S${params.tumor_name}$AF }}\' > {output.af_vardict}'
        ' && bcftools view -f .,PASS {input.vcf} | bedtools intersect -a stdin -b {input.az300} -header'
        ' | vawk \'{{ print $1,$2,$3,$4,$5,S${params.tumor_name}$AF, INFO$ANN}\' > {output.af_vardict_az300}'
# Generating the plot manually at a later stage.

## Germline summary
# Take a single germline call set (or preferably the ensemble best practice calls, if generated) and annotate any events found in Sean's 105/106 cancer predisposition gene set.
# Note: need to store that cancer gene list somewhere. Happy to add to bcbio directly but then need source information.

rule prep_germline:
    input:
        vcf = join(bb.date_dir, '{batch}-ensemble-annotated.vcf.gz'),
        ensg = join(loc.extras, 'cancer_genes_ENSG.txt')
    output:
        'umccrised/germline/{batch}-germline-ensemble-cancer.vcf.gz'
    params:
        ungz = lambda wc, output: get_ungz_gz(output[0])[0]
    shell:
        'zgrep ^# {input.vcf} > {params.ungz} && '
        'zgrep -f {input.ensg} {input.vcf} >> {params.ungz} && '
        'bgzip {params.ungz} && tabix {output}'

# Prepare it for submission to PCGR
rule pcgr_germline:
    input:
        vcf = rules.prep_germline.output[0]
    output:
        'umccrised/pcgr/{batch}-germline-ensemble-cancer-chroms.vcf.gz',
    shell:
        'bcftools view -f .,PASS -r 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y {input.vcf} -Oz > {output}'

# Can review the `.txt` file in Excel or submit the VCF to frameworks such as [gene.iobio](http://gene.iobio.io/). 

## Structural changes
# Re-do the CNV plots. This will need lots of love (drop gene names, make the scatterplot viable again, etc.).

# Remove gene labels
rule cnvkit_cleanup:
    input:
        lambda wc: join(batch_by_name[wc.batch].tumor.dirpath, f'{wc.batch}-cnvkit.cns')
    output:
        'umccrised/structural/{batch}-cnvkit-nolabels.cns'
    shell:
        'head -n 1 {input} > {output} && '
        'grep -v \'^chromosome\' {input} | awk -v OFS=\'\\t\' \'\{ print $1, $2, $3, "", $5, $6, $7, $8 \}\' >> {output}'

# Plot
rule cnvkit_plot:
    input:
        rules.cnvkit_cleanup.output[0]
    output:
        'umccrised/structural/{batch}_cnvkit_diagram.done'
    shell:
        'cnvkit.py diagram -s {input}'

'''
# Bring in the prioritized SV calls from Manta. This will change with the inclusion of BPI and should also include a basic plot at some stage:
cp ${BCRESULT}/${BCTUMOR}/*prior* .
cat ${BCBATCH}-sv-prioritize.tsv | grep manta > ${BCBATCH}-sv-prioritize-manta.tsv
```

At least for the (most conservative) manta calls generate a file for viewing in Ribbon:

```
awk -v OFS='\t' {'print $1,$2'} ${BCINSTALL}/genomes/Hsapiens/hg19/seq/hg19.fa.fai > hg19.genome

bcftools view -f .,PASS ${BCBATCH}-sv-prioritize-manta.vcf.gz | ${EXTRAS}/svtools-master/vcfToBedpe | cut -f 1-3 | bedtools slop -b 5000 -i stdin -g hg19.genome > manta_regions.bed

bcftools view -f .,PASS ${BCBATCH}-sv-prioritize-manta.vcf.gz | ${EXTRAS}/svtools-master/vcfToBedpe | cut -f 4-6 | grep -v 'CHROM' | bedtools slop -i stdin -g hg19.genome -b 5000 >> manta_regions.bed

bedtools sort -i manta_regions.bed > manta_regions_sorted.bed
bedtools merge -i manta_regions_sorted.bed > ${BCBATCH}_manta_regions_merged.bed

# And one in BEDPE format
bcftools view -f .,PASS ${BCBATCH}-sv-prioritize-manta.vcf.gz | ${EXTRAS}/svtools-master/vcfToBedpe | cut -f 1-7 > ${BCBATCH}-sv-prioritize-manta.bedpe

cd ..
```


## IGV

Create BAM and VCF files suitable for moving around easily. Right now this only uses the AZ300 gene list. It also needs to include Sean's cancer predisposition list and create proper Mini-BAMs and VCFs that include regions with +/- 1kb around all somatic SNVs, CNVs and SVs.

```
mkdir igv
cd igv

# Always add a list of known cancer genes even where 
# no mutations are found
cp ${BCINSTALL}/genomes/Hsapiens/GRCh37/coverage/prioritize/cancer/az300.bed.gz .
gunzip az300.bed.gz

# Add Ensemble calls
cut -f 1-3 az300.bed > ${BCTUMOR}.bed
bcftools view -H ../somatic/${BCBATCH}-ensemble-annotated.vcf.gz | awk -v OFS="\t" '{print $1, $2-100, $2+100}' >> ${BCTUMOR}.bed

# Bring in conservative Manta calls
cat ../structural/${BCBATCH}_manta_regions_merged.bed >> ${BCTUMOR}.bed

# Sort and merge
bedtools sort -i ${BCTUMOR}.bed > ${BCTUMOR}_sorted.bed
bedtools merge -i ${BCTUMOR}_sorted.bed > ${BCTUMOR}_sorted_merged.bed 

sambamba view -f bam -L ./${BCTUMOR}_sorted_merged.bed ${BCRESULT}/${BCNORMAL}/${BCNORMAL}-ready.bam -t 28 -o ${BCNORMAL}_mini.bam
samtools index ${BCNORMAL}_mini.bam

sambamba view -f bam -L ./${BCTUMOR}_sorted_merged.bed {BCRESULT}/${BCTUMOR}/${BCTUMOR}-ready.bam -t 28 -o ${BCTUMOR}_mini.bam
samtools index ${BCTUMOR}_mini.bam

cd ..
```

## Additional information

```
mkdir log
cd log
ln ${BCRESULT}${BCFINAL}/data_versions.csv .
ln ${BCRESULT}${BCFINAL}/programs.txt .
ln ${BCRESULT}/config/* .
```

'''

