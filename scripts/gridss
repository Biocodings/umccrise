#!/usr/bin/env python
import glob
import os
import platform
import sys
from os import rename
from os.path import isfile, join, dirname, abspath, basename, exists
import click
import subprocess

from ngs_utils.call_process import run_simple
from ngs_utils.conda_utils import secondary_conda_env
from ngs_utils.file_utils import verify_file, safe_mkdir, splitext_plus
from ngs_utils import logger
from ngs_utils.logger import info, critical, err
from ngs_utils.snakemake_utils import run_snakemake
from ngs_utils.utils import set_locale; set_locale()
from umccrise import package_path
from reference_data import api as refdata


@click.command()
@click.option('-o', 'output_dir', type=click.Path(), help='Output directory (will be created if does not exist)')
@click.option('-N', 'normal_bam', type=click.Path(exists=True), required=True, help='Normal BAM')
@click.option('-T', 'tumor_bam', type=click.Path(exists=True), required=True, help='Tumor BAM')
@click.option('-nn', 'normal_name', help='Normal sample name')
@click.option('-tn', 'tumor_name', help='Tumor sample name')
@click.option('-g', 'genome', default='GRCh37')
@click.option('--genomes', '--genomes-dir', 'input_genomes_url', help='Path to umccrise genomes data. '
              'Can be s3 or gds. Alternative to --gridss-ref-dir')
@click.option('--gridss-ref-dir', 'gridss_ref_dir', help='Path to gridss genomes dir (alternative to --genomes-dir)')
@click.option('--ref-fa', 'ref_fa', help='Path reference fasta (useful if you need to override the default in '
                                         '--gridss-ref-dir in case if your contigs don\'t match the one there')

# Snakemake params:
@click.option('-j', 'jobs', type=click.INT, default=2)
@click.option('--unlock', is_flag=True, help='Propagaded to snakemake')
@click.option('-n', '--dryrun', 'dryrun', is_flag=True,
              help='Propagated to snakemake. Just prints the rules and the commands '
                   'to run without actually generating any files.')
@click.option('--target', 'target_rule', help='Target rule (concordance, contamination, or all)')

def main(output_dir=None, normal_bam=None, tumor_bam=None,
         normal_name=None, tumor_name=None,
         genome=None, input_genomes_url=None, gridss_ref_dir=None, ref_fa=None,
         jobs=None, unlock=False, dryrun=False, target_rule=None):

    assert genome == 'GRCh37', 'Only GRCh37 is supported for GRIDSS yet'

    output_dir = safe_mkdir(abspath(output_dir or 'gridss'))
    logger.init(log_fpath_=join(output_dir, 'gridss.log'), save_previous=True)
    work_dir = safe_mkdir(join(output_dir, 'work'))

    normal_name = normal_name or splitext_plus(basename(normal_bam))[0]\
        .replace('-ready', '').replace('-sorted', '')
    tumor_name = tumor_name or splitext_plus(basename(tumor_bam))[0]\
        .replace('-ready', '').replace('-sorted', '')

    gpl_source = abspath(join(package_path(), '..', 'gridss-purple-linx'))
    gridss_scripts_dir = abspath(join(package_path(), '..', 'gridss/scripts'))

    if input_genomes_url:
        refdata.find_genomes_dir(input_genomes_url)
    if not gridss_ref_dir:
        gridss_ref_dir = refdata.get_ref_file(genome, 'gridss_purple_linx_dir')
    if not ref_fa:
        ref_fa = refdata.get_ref_file(genome, 'fa')

    hmf_env_path = secondary_conda_env('hmf')

    gridss_jar = glob.glob(join(hmf_env_path, 'share/gridss-*/gridss.jar'))[0]

    conf = {
        'tumor_bam': verify_file(tumor_bam, 'Tumor BAM, -T option'),
        'normal_bam': verify_file(normal_bam, 'Normal BAM, -N option'),
        'genome': genome,
        'ref_fa': ref_fa,
        'tumor_name': tumor_name,
        'normal_name': normal_name,
        'gridss_jar': gridss_jar,
        'gpl_source': gpl_source,
        'gridss_ref_dir': gridss_ref_dir,
        'gridss_scripts_dir': gridss_scripts_dir,
        'output_dir': output_dir,
        'work_dir': work_dir,
        'total_cores': jobs,
    }

    run_snakemake(join(package_path(), '..', 'gridss', 'Snakefile'), conf, jobs,
                  output_dir, unlock=unlock, dryrun=dryrun, target_rules=target_rule)


if __name__ == '__main__':
    main()
