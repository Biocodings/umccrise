#!/usr/bin/env python
import sys
from os.path import dirname, abspath, join, basename, isfile, splitext
import click
from ngs_utils.file_utils import splitext_plus, verify_file, safe_mkdir
from ngs_utils.logger import err, critical
from ngs_utils.snakemake_utils import run_snakemake
from hpc_utils.hpc import find_loc, get_ref_file, get_genomes_d
from umccrise import package_path
from ngs_utils.utils import set_locale; set_locale()


@click.command()
@click.option('-N', 'normal_bam', type=click.Path(exists=True), required=True, help='Normal BAM')
@click.option('-T', 'tumor_bam', type=click.Path(exists=True), required=True, help='Tumor BAM')
@click.option('-g', 'genome', required=True, help='Genome build')
@click.option('-o', 'output_dir', type=click.Path(), help='Output directory (will be created if does not exist)')
@click.option('-tn', 'tumor_name', help='Normal sample name')
@click.option('-nn', 'normal_name', help='Tumor sample name')
@click.option('--use-het-markers', 'use_het_markers', is_flag=True, help=
    'Run concordance without -H flag: will use heterozugous SNPs, which will make it sensitive to copy number. '
    'Use only if you there is not enough markers to determine concordance and your sample has not many CN')

# Snakemake params:
@click.option('-j', 'jobs', type=click.INT, default=2)
@click.option('--unlock', is_flag=True, help='Propagaded to snakemake')
@click.option('-n', '--dryrun', 'dryrun', is_flag=True,
              help='Propagated to snakemake. Just prints the rules and the commands '
                   'to run without actually generating any files.')
@click.option('--target', 'target_rule', help='Target rule (concordance, contamination, or all)')

def main(normal_bam, tumor_bam, genome, output_dir=None,
         tumor_name=None, normal_name=None, use_het_markers=None,
         jobs=None, unlock=False, dryrun=False, target_rule=None):

    output_dir = output_dir or 'conpairred'
    output_dir = abspath(output_dir)
    safe_mkdir(output_dir)
    if genome is None:
        genome = 'GRCh37'
    ref_fa = get_ref_file(genome)

    tumor_name = tumor_name or splitext(basename(tumor_bam))[0]
    normal_name = normal_name or splitext(basename(normal_bam))[0]
    conf = {
        'tumor_bam': verify_file(tumor_bam, 'Tumor BAM, -T option'),
        'normal_bam': verify_file(normal_bam, 'Normal BAM, -N option'),
        'genome': genome,
        'ref_fa': ref_fa,
        'tumor_name': tumor_name,
        'normal_name': normal_name,
    }
    if use_het_markers:
        conf['use_het_markers'] = 'yes'

    run_snakemake(join(package_path(), 'conpair', 'Snakefile'), conf, jobs,
                  output_dir, unlock=unlock, dryrun=dryrun, target_rules=target_rule)

    concordance = join(output_dir, 'concordance/' + tumor_name + '.txt')
    t_contamination = join(output_dir, 'contamination/' + tumor_name + '.txt')
    n_contamination = join(output_dir, 'contamination/' + normal_name + '.txt')
    if isfile(concordance):
        print(f'Concordance: {concordance}')
        with open(concordance) as f:
            for l in f:
                sys.stdout.write('  ' + l)
    if isfile(t_contamination):
        print(f':Tumor contamination {t_contamination}')
        t_c = open(t_contamination).read().strip().split(': ')[1]
        print(f'  {t_c}')
    if isfile(n_contamination):
        print(f':Normal contamination {n_contamination}')
        n_c = open(n_contamination).read().strip().split(': ')[1]
        print(f'  {n_c}')


if __name__ == '__main__':
    main()
