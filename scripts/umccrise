#!/usr/bin/env python
import os
import sys
from os.path import isfile, join, dirname, abspath, isdir
import click
import subprocess
import tempfile

from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import verify_file, safe_mkdir, verify_dir
from ngs_utils import logger
from ngs_utils.logger import warn, info, critical
from ngs_utils.snakemake_utils import run_snakemake, make_cluster_cmdl, prep_resources
from ngs_utils.utils import set_locale; set_locale()
from ngs_utils import snakemake_utils
from umccrise import package_path
from umccrise import _version as version
from umccrise import prep_inputs
from reference_data import api as refdata


@click.command()
@click.version_option(version.__version__)
@click.argument('input_paths', type=click.Path(exists=True), nargs=-1)
@click.option('-o', 'output_dir', type=click.Path(), help='Output directory [def: umccrised]')
@click.option('-s', '--sample', 'sample', multiple=True,
              help='Optionally, specific sample or batch to process, e.g.: -s SAMPLE1 -s BATCH2')
@click.option('-e', '--exclude', 'exclude', multiple=True,
              help='Optionally, samples or batches to ignore, e.g.: -e SAMPLE1 -e BATCH2')
@click.option('--genomes', '--genomes-dir', 'input_genomes_url', help='Path to the reference data. Can be s3 or gds')
@click.option('-g', '--genome', 'genome_build',
              help='Genome build for custom runs (GRCh37, hg38). Genome build of bcbio and Dragen runs is '
                   'determined automatically.')
@click.option('-S', '-T', '--stage', 'include_stages', multiple=True,
              help='Optionally, specific stage to run, e.g.: -T pcgr -T coverage -T structural -T small_variants')
@click.option('-E', '--skip-stage', 'exclude_stages', multiple=True,
              help='Optionally, stages to skip, e.g.: -E oncoviruses -E cpsr')
@click.option('--min-af', 'min_af', type=click.INT,
              help='AF threshold to filter small variants (unless a known hotspot)')

# Cluster
@click.option('-t', '--threads', '-j', '--jobs', '--cores', 'cores', type=click.INT,
              help='Maximum number of cores to use at single time (works both for local and cluster runs)')
@click.option('-c', '--cluster-auto', 'cluster', is_flag=True, help='Submit jobs to cluster')
@click.option('--cluster-cmd', 'cluster_submit_cmd',
              help='Command to run cluster with (to override -c/--cluster-auto)')

# Debug and snakemake
@click.option('--debug', 'debug', is_flag=True, help='More verboe messages. Also sets restart times to 0.')
@click.option('--unlock', is_flag=True,
              help='Use when you are rerunning after Ctrl+C or an error. Propagated to snakemake.')
@click.option('-r', '--restarts', '--restart-times', 'restart_times',
              help=f'How many times to try out rerunning rules if they fail. "--restart-times 1" means that the rule '
                   f'will be attempted maximum 1 time. Default is {snakemake_utils.DEFAULT_RESTART_TIMES}. The value '
                   f'propagated to snakemake is decremented, because snakemake interprets it as "how many times '
                   f'to restart after '
                   f'the rule is failed").')
@click.option('-n', '--dryrun', 'dryrun', is_flag=True,
              help='Propagated to snakemake. Prints rules and commands to be run without actually executing them.')
@click.option('--report', 'report',
              help='Propagated to snakemake. Create an HTML report with results and statistics. '
                   'The argument has to be a file path ending with ".html".')
@click.option('--dag', 'dag', is_flag=True,
              help='Propagated to snakemake. Print the DAG of jobs in the dot language. '
                   'Example usage: umccrise --dag > tmp.txt; cat <cleaned-tmp.txt> | dot -Tsvg > dag.svg')
@click.option('--resources', 'hpc_resources',
              help='Can be used to limit the amount of memory allowed to be used, e.g.: --resources mem_mb=1000.'
                   'Propagated to snakemake.')

def main(input_paths, output_dir=None, sample=None, exclude=None, input_genomes_url=None, genome_build=None,
         include_stages:list = None, exclude_stages:list = None, min_af=None,
         cores=None, cluster=False, cluster_submit_cmd=None, debug=False,
         unlock=False, restart_times=None, dryrun=False, report=None, dag=False, hpc_resources=None):
    """
Umccrise (post-process) a bcbio or Dragen project.\n
input_paths: a path to inputs:\n
    * if a dir, treated as a bcbio run folder (a "final" or a "datestamp" directory), or a Dragen run folder\n
    * if files, BAMs and VCF are supported
"""
    output_dir = output_dir or 'umccrised'
    output_dir = safe_mkdir(abspath(output_dir))
    log_dir = safe_mkdir(join(output_dir, 'log'))
    logger.init(log_fpath_=join(log_dir, 'command.txt'), save_previous=True)
    logger.info(f'umccrise {version.__version__}')

    if isfile(join(output_dir, 'all.done')):
        run_simple('rm ' + join(output_dir, 'all.done'))

    conf = dict()

    #######################
    #### Setting paths ####
    #######################

    tmp_dirs = []

    # Input paths
    if not isinstance(input_paths, list):
        input_paths = list(input_paths)
    # if a project is passed as a tarball, uncompressing
    clean_input_paths = []
    for input_path in input_paths:
        if isfile(input_path):
            verify_file(input_path, is_critical=True)
            if input_path.endswith('.tar.gz') or input_path.endswith('.tgz'):
                input_project, tmp_dir = extract_tarball_input(output_dir, input_paths, 'Bcbio or Dragen project input')
                tmp_dirs.append(tmp_dir)
                clean_input_paths.append(verify_dir(input_project))
            else:
                clean_input_paths.append(verify_file(input_path))
        if isdir(input_path):
            verify_dir(input_path, is_critical=True)
            clean_input_paths.append(verify_dir(input_path))
    conf['input_paths'] = ','.join(clean_input_paths)

    # Find the genomes dir, and extract or pull it from s3/gds if needed, or error out if can't
    refdata.find_genomes_dir(input_genomes_url)
    conf['genomes_dir'] = verify_dir(refdata.genomes_dir, is_critical=True,
                                     description='Refernece genomes directory')
    logger.info(f'Using genomes directory: {refdata.genomes_dir}')

    #####################################
    #### Setting non-path parameters ####
    #####################################

    if genome_build:
        conf['genome_build'] = genome_build

    if sample:
        conf['sample'] = ','.join(sample)
    if exclude:
        conf['exclude'] = ','.join(exclude)

    if include_stages:
        conf['include_stages'] = ','.join(include_stages)
    if exclude_stages:
        conf['exclude_stages'] = ','.join(exclude_stages)

    if min_af is not None:
        conf['min_af'] = min_af

    run, batch_by_name = prep_inputs(conf, silent=True)

    cpu_resources = prep_resources(
        num_batches=len(batch_by_name),
        num_samples=len(run.samples),
        ncpus_requested=cores,
        ncpus_per_node=refdata.ncpus_on_node,
        is_cluster=cluster is not False or cluster_submit_cmd
    )

    cluster_log_dir = None
    cluster_param = None
    if cluster is not False or cluster_submit_cmd:
        cluster_log_dir = join(log_dir, 'cluster')
        cluster_param = make_cluster_cmdl(cluster_log_dir, refdata, 'umccrise', cluster_submit_cmd)

    snakefile = join(package_path(), 'Snakefile')
    run_snakemake(
        snakefile, conf,
        output_dir=output_dir,
        log_dir=log_dir,
        unlock=unlock,
        dryrun=dryrun,
        restart_times=restart_times,
        debug=debug,
        cores=cpu_resources.ncpus_available,
        local_cores=cpu_resources.ncpus_local,
        ncpus_per_batch=cpu_resources.ncpus_per_batch,
        ncpus_per_sample=cpu_resources.ncpus_per_sample,
        resources=hpc_resources,
        cluster_param=cluster_param,
        cluster_log_dir=cluster_log_dir,
        report=report,
        dag=dag,
        tmp_dirs=tmp_dirs,
    )


def extract_tarball_input(output_dir, path, description):
    if not path.endswith('.tar.gz') and not path.endswith('.tgz'):
        critical(f'{description} must be either a directory, or a .tar.gz file: {path}')
    input_dir = safe_mkdir(join(output_dir, 'input'))
    tmp_dir = tempfile.TemporaryDirectory(prefix=input_dir)
    run_simple(f'tar -xzf {path} --directory {tmp_dir.name}')
    input_project = join(tmp_dir.name, os.listdir(tmp_dir.name)[0])
    assert isdir(input_project), input_project + " " + str(os.listdir(tmp_dir.name))
    return input_project, tmp_dir


if __name__ == '__main__':
    main()
