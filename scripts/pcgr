#!/usr/bin/env python

import os
import platform
import sys
from os import rename
from os.path import isfile, join, dirname, abspath, basename, exists
import click
import subprocess

from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import verify_file, safe_mkdir, splitext_plus
from ngs_utils import logger
from ngs_utils.logger import info, critical, err
from ngs_utils.utils import set_locale; set_locale()
from umccrise import package_path

@click.command()
@click.argument('vcf_path', type=click.Path(exists=True))
@click.argument('purple_tsv', type=click.Path(exists=True), required=False)
@click.option('-g', 'genome')
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-s', 'sample')
@click.option('--germline', is_flag=True)
@click.option('--docker/--no-docker', 'use_docker', is_flag=True, default=None)
@click.option('--pcgr-data', type=click.Path(exists=True),
              help='Path to PCGR data directory (defaults are known for spartan and raijin, or if --genomes-dir is provided)')
@click.option('--genomes-dir', 'genomes_dir')
@click.option('--puriry', 'puriry', type=click.FLOAT)
@click.option('--ploidy', 'ploidy', type=click.FLOAT)
@click.option('--predispose-genes', 'predispose_genes', type=click.Path(exists=True))
@click.option('--predispose-bed', 'predispose_bed', type=click.Path(exists=True))
def main(vcf_path, purple_tsv=None, output_dir=None, genome=None, sample=None, germline=False, use_docker=None,
         pcgr_data=None, genomes_dir=None, puriry=None, ploidy=None, predispose_genes=None, predispose_bed=None):

    if not pcgr_data:
        from reference_data import api as refdata
        if genomes_dir:
            refdata.find_genomes_dir(genomes_dir)
        pcgr_data = refdata.get_ref_file(genome=genome, key='pcgr_data')
        if not pcgr_data:
            logger.critical(f'PCGR data is not found on the system "{refdata.name}".'
                            f' Please, provide the path to PCGR data with --pcgr-data.'
                            f' Follow `https://github.com/vladsaveliev/pcgr` to get it.')
    output_dir = output_dir or 'pcgrred'
    output_dir = abspath(output_dir)
    safe_mkdir(output_dir)
    logger.init(log_fpath_=join(output_dir, 'pcgr.log'), save_previous=True)

    pcgr_toml = join(package_path(), 'pcgr', 'pcgr.toml')
    cpsr_toml = join(package_path(), 'pcgr', 'cpsr.toml')
    sample = sample or splitext_plus(basename(vcf_path))[0]
    if genome is None:
        genome = 'GRCh37'
    pcgr_genome = 'grch38' if ('38' in genome) else 'grch37'
    print('use_docker:', use_docker)
    if use_docker is None:
        check_docker_command = 'docker images -q sigven/pcgr'
        try:
            output = subprocess.check_output(check_docker_command, stderr=subprocess.STDOUT, shell=True)
        except subprocess.CalledProcessError:
            if platform.system() == 'Darwin':
                critical('Docker is not running. Cannot run PCGR without Docker on macOS.')
            else:
                logger.warn('Docker is not running Trying running in --no-docker mode.')
        else:
            if len(output) == 0:
                logger.warn('Docker image sigven/pcgr not found, trying running in --no-docker mode')
                use_docker = False
            else:
                use_docker = True

    rlibs_env = ''
    # if not use_docker:
    #     r_pcgrr_dir_ori = join(pcgr_dir, 'src', 'R', 'pcgrr')
    #     r_pcgrr_dir_dst = safe_mkdir(join(output_dir, 'work', sample))
    #     info(f'Installing a copy of the "pcgrr" package to avoid the race condition for template tmp files: '
    #          f'{r_pcgrr_dir_ori} -> {r_pcgrr_dir_dst}')
    #     os.environ['R_LIBS'] = r_pcgrr_dir_dst + ':' + os.environ.get('R_LIBS', '')
    #     rlibs_env = f'R_LIBS={r_pcgrr_dir_dst} '
    #     run(f'{rlibs_env}R -e "library(devtools); devtools::install(\'{r_pcgrr_dir_ori}\')"')

    if germline:
        expected_file_base = join(output_dir, f'{sample}.cpsr.{pcgr_genome}')
        renamed_file_base = join(output_dir, f'{sample}.cpsr')

        panel_param = '--panel_id 0'
        if predispose_bed:
            run_simple(f'cut -f1-4 {predispose_bed} > {join(output_dir, "custom_panel.bed")}')
            panel_param = f'--custom_panel {join(output_dir, "custom_panel.bed")}'
        elif predispose_genes:
            panel_param = f'--custom_panel_gene_list {predispose_genes}'

        cmd = (f'{rlibs_env}'
               f'cpsr.py'
               f' {abspath(vcf_path)}'
               f' {dirname(pcgr_data)}'
               f' {output_dir}'
               f' {pcgr_genome}'
               f' {cpsr_toml}'
               f' {sample}'
               f' {" --docker-uid root" if use_docker else " --no-docker"}'
               f' --force_overwrite'
               f' --no_vcf_validate'
               f' {panel_param}'
               f' --debug'
        )
    else:
        expected_file_base = join(output_dir, f'{sample}.pcgr_acmg.{pcgr_genome}')
        renamed_file_base = join(output_dir, f'{sample}.pcgr')

        purple_tsv_fixed = None
        if purple_tsv:
            purple_tsv_fixed = join(output_dir, sample + '_cnv_input.tsv')
            prep_cnv_cmd = f'(echo -e "Chromosome\\tStart\\tEnd\\tSegment_Mean" ; cat {abspath(purple_tsv)} | ' \
                           f'grep -v ^# | grep -v ^GL | cut -f1,2,3,4 | awk -v OFS="\\t" \'{{ if ($4<=0) ' \
                           f'{{ print $1,$2,$3,-4 }} else {{ print $1,$2,$3, log($4/2)/log(2) }} }}\') > ' \
                           f'{purple_tsv_fixed}'
            run_simple(prep_cnv_cmd)
        cmd = (f'{rlibs_env}'
               f'pcgr.py'
               f' --input_vcf {abspath(vcf_path)}' +
              (f' --input_cna {purple_tsv_fixed}' if purple_tsv_fixed else '') +
               f' {dirname(pcgr_data)}'
               f' {output_dir}'
               f' {pcgr_genome}'
               f' {pcgr_toml}'
               f' {sample}'
               f' {" --docker-uid root" if use_docker else " --no-docker"}'
               f' --force_overwrite'
               f' --no_vcf_validate' +
              (f' --tumor_purity {puriry}' if puriry else '') +
              (f' --tumor_ploidy {ploidy}' if ploidy else '') +
               f' --debug'
        )
    try:
        run_simple(cmd)
    except subprocess.SubprocessError:
        err('--------\n')
        err(f'Error running PCGR.\n')
        raise

    endings = ['.pass.vcf.gz', '.pass.vcf.gz.tbi', '.html']
    if not germline:
        endings.append('.snvs_indels.tiers.tsv')
    for ending in endings:
        expected_path = expected_file_base + ending
        renamed_path = renamed_file_base + ending
        if not isfile(expected_path):
            err('--------\n')
            critical('Error running PCGR: expected output file is not produced: ' + expected_path)
        rename(expected_path, renamed_path)
        info(f'PCGR report: {renamed_path}')
    
if __name__ == '__main__':
    main()
