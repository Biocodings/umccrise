sudo: required
dist: trusty

language: python
python:
  # We don't actually use the Travis Python (since we are on conda), but this keeps it organized.
  - "3.6"

install:
  ##########################################
  ## To pull cached miniconda and update: ##
  ##########################################
  # Get and install anaconda (https://conda.io/docs/travis.html) and packages
  - if [ -d $HOME/miniconda ]; then echo "ls HOME/miniconda:" ; ls $HOME/miniconda ; fi ;
  - if [ ! -d $HOME/miniconda/bin ] ; then
      if [ -d $HOME/miniconda ] ; then rm -rf $HOME/miniconda ; fi ;
      wget -nv https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh ;
      bash miniconda.sh -b -p $HOME/miniconda ;
      export PATH=$HOME/miniconda/bin:$PATH ;
      hash -r ;
      conda config --set always_yes yes --set changeps1 no ;
      conda update -q conda ;
      conda env create -n umccrise --file environment.yml ;
    else
      export PATH=$HOME/miniconda/bin:$PATH ;
      echo "else ls HOME/miniconda:" ; ls $HOME/miniconda ;
      conda config --set always_yes yes --set changeps1 no ;
      conda env update -f environment.yml ;
    fi
  - source activate umccrise
  # Useful for debugging any issues with conda
  - conda info -a
  # Installing the codebase (source code was automatically cloned into CWD by Travis)
  - pip install -e .
  - R -e "library(devtools) ; options(unzip = '/usr/bin/unzip') ; devtools::install_github('umccr/rock')"

# Skip caching for now so we can remove miniconda folder and save space for deploy. Consider
#cache:
#  directories:
#  - $HOME/miniconda
#  timeout: 600  # allow 10 minutes to cache instead of default 3 minutes

script:
  - nosetests --nocapture tests/test.py -a normal

services:
  - docker
addons:
  apt:
    packages:
      - docker-ce

after_success:
  - rm -rf $HOME/miniconda
  - rm -rf tests/umccrise_test_data
  - docker version
  - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USER" --password-stdin
  # Building docker image
  - docker build -t umccr/umccrise:$(cat VERSION.txt) -f Dockerfile .
  - docker images
  - docker push umccr/umccrise:$(cat VERSION.txt)
  # Building a version with PCGR
  - docker build -t umccr/umccrise_with_pcgr:$(cat VERSION.txt) -f Dockerfile.with_pcgr .
  - docker images
  - docker push umccr/umccrise_with_pcgr:$(cat VERSION.txt)
