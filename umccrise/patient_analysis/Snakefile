""" UMCCR post-bcbio patient analysis workflow
"""
import os
from os.path import join, abspath, dirname
from ngs_utils.file_utils import splitext_plus
from ngs_utils.bcbio import BcbioProject
from ngs_utils.file_utils import add_suffix, get_ungz_gz
from umccrise.utils import get_loc


threads_max = 32  # Use up to 32 cores at once, if available
cov_by_phenotype = config.get('cov_by_phenotype', {'tumor': 30, 'normal': 10})  # For goleft regions coverage, use minimum coverage 10 for normal, 30 for tumor
phenotypes = ['tumor', 'normal']

az300 = join(get_loc().hsapiens, 'GRCh37/coverage/prioritize/cancer/az300.bed.gz')
ref_fa = join(get_loc().hsapiens, 'GRCh37/seq/GRCh37.fa')

run = BcbioProject(config.get('run_dir', abspath(os.getcwd())))  

# Batch objects index by tumor sample names
batch_by_name = {b.tumor.name: b for b in run.batch_by_name.values()}
if 'batch' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if b.name == config['batch']}
if 'sample' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if b.tumor.name == config['sample']}


include: "Snakefile.coverage"
include: "Snakefile.somatic"
include: "Snakefile.germline"
include: "Snakefile.structural"
include: "Snakefile.igv"
include: "Snakefile.sig"


rule all:
    input:
        'umccrised/done'


rule symlink_multiqc:
    input:
        join(run.date_dir, 'multiqc/multiqc_report.html')
    output:
        'umccrised/qc/multiqc_report.html'
    shell:
        'ln -s {input} {output}'


## Additional information
# TODO: link it to MultiQC
rule log:
    input:
        join(run.date_dir, 'data_versions.csv'), 
        join(run.date_dir, 'programs.txt'), 
        run.config_dir
    output:
        'umccrised/log/data_versions.csv', 
        'umccrised/log/programs.txt', 
        'umccrised/log/config'
    params:
        log_dir = 'umccrised/log'
    shell:
        'ln -s {input} {params.log_dir}'


rule umccrised:
    input:
        rules.symlink_multiqc.output[0],
        rules.coverage.output[0],
        rules.somatic.output[0],
        rules.germline.output[0],
        rules.structural.output[0],
        rules.igv.output[0],
        rules.log.output[0],
        rules.sig.output[0]
    output:
        'umccrised/done'
    shell:
        'touch {output}'

