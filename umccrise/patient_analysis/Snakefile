""" UMCCR post-bcbio patient analysis workflow
"""
import os
from os.path import join, abspath, dirname
from ngs_utils.file_utils import splitext_plus
from ngs_utils.bcbio import BcbioProject
from ngs_utils.file_utils import add_suffix, get_ungz_gz
from umccrise.utils import get_loc


pcgr_url = config.get('pcgr_url', 'ec2-13-55-18-20')
cov_by_phenotype = config.get('cov_by_phenotype', {'tumor': 30, 'normal': 10})  # For goleft regions coverage, use minimum coverage 10 for normal, 30 for tumor
threads_max = 32  # Use up to 32 cores at once, if available

run = BcbioProject(config.get('run_dir', abspath(os.getcwd())))  

loc = get_loc()
az300 = join(loc.hsapiens, run.genome_build, 'coverage', 'prioritize', 'cancer', 'az300.bed.gz')
ref_fa = join(loc.hsapiens, run.genome_build, 'seq', run.genome_build + '.fa')

# Batch objects index by tumor sample names
batch_by_name = {b.tumor.name: b for b in run.batch_by_name.values()}
if 'batch' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if b.name == config['batch']}
if 'sample' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if b.tumor.name == config['sample']}


include: "Snakefile.coverage"
include: "Snakefile.somatic"
include: "Snakefile.germline"
include: "Snakefile.structural"
include: "Snakefile.igv"
include: "Snakefile.sig"


rule all:
    input:
        'umccrised/done'


rule symlink_multiqc:
    input:
        join(run.date_dir, 'multiqc/multiqc_report.html')
    output:
        'umccrised/qc/multiqc_report.html'
    shell:
        'ln -s {input} {output}'


## Additional information
# TODO: link it to MultiQC
rule log:
    input:
        join(run.date_dir, 'data_versions.csv'), 
        join(run.date_dir, 'programs.txt'), 
        run.config_dir
    output:
        'umccrised/log/data_versions.csv', 
        'umccrised/log/programs.txt', 
        'umccrised/log/config'
    params:
        log_dir = 'umccrised/log'
    shell:
        'ln -s {input} {params.log_dir}'


rule upload_to_pcgr:
    input:
        rules.pcgr_somatic_vcf.output,
        rules.pcgr_somatic_vcf.output,
        rules.pcgr_cns.output,
        rules.pcgr_germline.output,
        rules.pcgr_germline.output
    params:
        url = f'ubuntu@{pcgr_url}.ap-southeast-2.compute.amazonaws.com',
        som_dir = 'umccrised/{batch}/somatic/pcgr',
        germ_dir = 'umccrised/{batch}/germline/pcgr',
        batch = lambda wc: wc.batch
    output:
        'umccrised/.snakemake/pcgr_{batch}.done'
    shell:
        'scp -r {params.som_dir} {params.url}:/mnt/pcgr-0.4.2.1/{params.batch}_somatic'
        ' && '
        'scp -r {params.germ_dir} {params.url}:/mnt/pcgr-0.4.2.1/{params.batch}_germline'
        ' && '
        'touch {output}'
        # 'conda install -c conda-forge ansible>=2.3'
        # 'ansible-playbook aws.yaml'
        # 'ssh ubuntu@<AWS INSTANCE>'
        # 'cd /mnt/work/pcgr-*'
        # './pcgr.py --input_vcf examples/tumor_sample.COAD.vcf.gz --input_cna examples/tumor_sample.COAD.cna.tsv /mnt/work/pcgr-* output tumor_sample.COAD'

rule pcgr:
    input:
        expand(rules.upload_to_pcgr.output, batch=batch_by_name.keys())


rule umccrised:
    input:
        rules.symlink_multiqc.output,
        rules.coverage.output,
        rules.somatic.output,
        rules.germline.output,
        rules.structural.output,
        rules.igv.output,
        rules.log.output,
        rules.sig.output,
        rules.pcgr.output
    output:
        'umccrised/done'
    shell:
        'touch {output}'


