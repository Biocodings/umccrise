""" UMCCR post-bcbio patient analysis workflow
"""
import os
from os.path import join, abspath, dirname
from ngs_utils.file_utils import splitext_plus
from ngs_utils.bcbio import BcbioProject
from ngs_utils.file_utils import add_suffix, get_ungz_gz
from umccrise.utils import get_loc


shell.executable("bash")
shell.prefix("")


pcgr_url = config.get('pcgr_url', 'ec2-13-55-18-20')
cov_by_phenotype = config.get('cov_by_phenotype', {'tumor': 30, 'normal': 10})  # For goleft regions coverage, use minimum coverage 10 for normal, 30 for tumor
threads_max = 32  # Use up to 32 cores at once, if available

run = BcbioProject(config.get('run_dir', abspath(os.getcwd())))  

loc = get_loc()
az300 = join(loc.hsapiens, run.genome_build, 'coverage', 'prioritize', 'cancer', 'az300.bed.gz')
ref_fa = join(loc.hsapiens, run.genome_build, 'seq', run.genome_build + '.fa')

# Batch objects index by tumor sample names
batch_by_name = {b.tumor.name: b for b in run.batch_by_name.values()}
if 'batch' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if b.name == config['batch']}
if 'sample' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if b.tumor.name == config['sample']}


rule all:  # {}
    input:
        'umccrised/done'


## Somatic
rule panel_of_normals:  # {batch}
    input:
        vcf = lambda wc: join(run.date_dir, f'{batch_by_name[wc.batch].name}-ensemble-annotated.vcf.gz'),
        toml = join(loc.panel_of_normals_dir, 'annotate_normals_vcfanno.toml'),
        lua = join(loc.panel_of_normals_dir, 'code.lua')
    params:
        ht = 1,
        normals_dir = loc.panel_of_normals_dir
    output:
        'umccrised/{batch}/somatic/ensemble-pon.vcf.gz'
    shell:
        'vcfanno -lua {input.lua}'
        ' <(sed s#file=\\\"#file=\\\"{params.normals_dir}/# {input.toml})'
        ' {input.vcf} |'
        ' bcftools filter -e "INFO/PoN_CNT>={params.ht}" --soft-filter PoN --mode + -Oz -o {output}'
        ' && tabix -p vcf {output}'

rule pon_pass:  # {batch}
    input:
        rules.panel_of_normals.output[0]
    output:
        'umccrised/{batch}/somatic/ensemble-pon-pass.vcf.gz'
    shell:
        'bcftools view -f.,PASS -Oz {input} -o {output}'


## Germline
# Annotate any events found in Sean's 105/106 cancer predisposition gene set.
from umccrise.patient_analysis import get_cancer_genes_ensg
rule prep_germline:  # {batch}
    input:
        vcf = lambda wc: join(run.date_dir, f'{batch_by_name[wc.batch].normal.name}-ensemble-annotated.vcf.gz'),
        ensg = get_cancer_genes_ensg()
    output:
        'umccrised/{batch}/germline/germline-ensemble-cancer.vcf.gz'
    params:
        ungz = lambda wc, output: get_ungz_gz(output[0])[0]
    shell:
        'zgrep ^# {input.vcf} > {params.ungz} && '
        'zgrep -f {input.ensg} {input.vcf} >> {params.ungz} && '
        'bgzip {params.ungz} && tabix {output}'


include: "Snakefile.coverage"
include: "Snakefile.pcgr"
include: "Snakefile.structural"
include: "Snakefile.igv"
include: "Snakefile.sig"


rule symlink_multiqc:  # {}
    input:
        join(run.date_dir, 'multiqc/multiqc_report.html')
    output:
        'umccrised/qc/multiqc_report.html'
    shell:
        'ln -s {input} {output}'


## Additional information
# TODO: link it to MultiQC
rule log:  # {}
    input:
        join(run.date_dir, 'data_versions.csv'), 
        join(run.date_dir, 'programs.txt'), 
        run.config_dir
    output:
        'umccrised/log/data_versions.csv', 
        'umccrised/log/programs.txt', 
        'umccrised/log/config'
    params:
        log_dir = 'umccrised/log'
    shell:
        'ln -s {input} {params.log_dir}'


rule umccrised:  # {}
    input:
        rules.symlink_multiqc.output,
        rules.coverage.output,
        rules.pcgr.output,
        rules.structural.output,
        rules.igv.output,
        rules.log.output,
        rules.sig.output
    output:
        'umccrised/done'
    shell:
        'touch {output}'


