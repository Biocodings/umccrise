""" UMCCR post-bcbio patient analysis workflow
"""
import os
from os.path import join, abspath, dirname
from ngs_utils.file_utils import splitext_plus
from ngs_utils.bcbio import BcbioProject
from ngs_utils.file_utils import add_suffix, get_ungz_gz
from umccrise.utils import get_loc, get_sample_name
from umccrise.patient_analysis import get_sig_rmd_file


threads_max = 32  # Use up to 32 cores at once, if available
cov_by_phenotype = config.get('cov_by_phenotype', {'tumor': 30, 'normal': 10})  # For goleft regions coverage, use minimum coverage 10 for normal, 30 for tumor
phenotypes = ['tumor', 'normal']

az300 = join(get_loc().hsapiens, 'GRCh37/coverage/prioritize/cancer/az300.bed.gz')
ref_fa = join(get_loc().hsapiens, 'GRCh37/seq/GRCh37.fa')
extras = get_loc().extras

run = BcbioProject(config.get('run_dir', abspath(os.getcwd())))  
batch_by_name = run.batch_by_name
if 'batch' in config:
    batch_by_name = {k: v for k, v in batch_by_name.items() if k == config['batch']}


include: "Snakefile.coverage"
include: "Snakefile.somatic"
include: "Snakefile.germline"
include: "Snakefile.structural"
include: "Snakefile.igv"


rule all:
    input:
        'umccrised/done'


rule symlink_multiqc:
    input:
        join(run.date_dir, 'multiqc/multiqc_report.html')
    output:
        'umccrised/qc/multiqc_report.html'
    shell:
        'ln -s {input} {output}'


## Additional information
# TODO: link it to MultiQC
rule log:
    input:
        join(run.date_dir, 'data_versions.csv'), 
        join(run.date_dir, 'programs.txt'), 
        run.config_dir
    output:
        'umccrised/log/data_versions.csv', 
        'umccrised/log/programs.txt', 
        'umccrised/log/config'
    params:
        log_dir = 'umccrised/log'
    shell:
        'ln -s {input} {params.log_dir}'


rule sig_rmd:
    input:
        af_freqs = rules.af_freqs.output[0],
        af_freqs_az300 = rules.af_freqs_az300.output[0],
        vcf = rules.cgi.output[0]
    params:
        sig_rmd = get_sig_rmd_file(),
        tumor_name = lambda wc: batch_by_name[wc.batch].tumor.name,
        workdir = os.getcwd(),
        output_file = join(os.getcwd(), 'umccrised/{batch}/somatic/rstudio/sig.html')
    output:
        'umccrised/{batch}/somatic/rstudio/sig.html'
    run:
        os.system("which Rscript")
        shell('/usr/local/bin/Rscript -e "rmarkdown::render(\'{params.sig_rmd}\', '
        'output_file=\'{params.output_file}\', '
        'params=list('
        'af_freqs=\'{input.af_freqs}\', '
        'af_freqs_az300=\'{input.af_freqs_az300}\', '
        'vcf=\'{input.vcf}\', '
        'tumor_name=\'{params.tumor_name}\', '
        'workdir=\'{params.workdir}\''
        '))"'
        ' && if [ -e x.txt ] ; then exit 1; fi')


rule umccrised:
    input:
        rules.symlink_multiqc.output[0],
        rules.coverage.output[0],
        rules.somatic.output[0],
        rules.germline.output[0],
        rules.structural.output[0],
        rules.igv.output[0],
        rules.log.output[0],
        expand(rules.sig_rmd.output[0], batch=batch_by_name.values())
    output:
        'umccrised/done'
    shell:
        'touch {output}'

