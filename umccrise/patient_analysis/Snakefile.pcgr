"""
PCGR
-------------
Prepare somatic, germline variant files, and configuration TOMLs for PCGR; tarball and upload to the AWS instance
"""
from os.path import relpath, basename
from umccrise import panel_of_normals


##### Preparing inputs for pcgr.py

# PCGR struggles with anything but the basic chromosome setup.
# It also ignores any variant not marked `PASS` so might as well remove others to save on transfer times.
rule pcgr_somatic_vcf:
    input:
        vcf = rules.somatic_vcf_pon_pass.output.vcf,
        tbi = rules.somatic_vcf_pon_pass.output.tbi
    output:
        vcf = '{batch}/pcgr/input/{batch}-' + unique_id + '-somatic.vcf.gz',
        tbi = '{batch}/pcgr/input/{batch}-' + unique_id + '-somatic.vcf.gz.tbi'
    shell:
        'cp {input.vcf} {output.vcf} && cp {input.tbi} {output.tbi}'

rule pcgr_germline_vcf:
    input:
        vcf = rules.germline_vcf_prep.output.vcf,
        tbi = rules.germline_vcf_prep.output.tbi
    output:
        vcf = '{batch}/pcgr/input/{batch}-' + unique_id + '-normal.vcf.gz',
        tbi = '{batch}/pcgr/input/{batch}-' + unique_id + '-normal.vcf.gz.tbi'
    shell:
        'cp {input.vcf} {output.vcf} && cp {input.tbi} {output.tbi}'

# PCGR also wants a slightly different format for the CNS data:
rule pcgr_cns:
    input:
        lambda wc: join(batch_by_name[wc.batch].tumor.dirpath, f'{batch_by_name[wc.batch].name}-cnvkit.cns')
    output:
        '{batch}/pcgr/input/{batch}-' + unique_id + '-somatic.tsv'
    shell:
        'echo -e "Chromosome\\tStart\\tEnd\\tSegment_Mean" > {output} && cat {input} | grep -v ^chromosome | cut -f 1,2,3,5 >> {output}'

from umccrise.patient_analysis import here as pa_source_dir

rule prep_tomls:
    input:
        somatic = join(pa_source_dir, 'pcgr', 'pcgr_configuration_somatic.toml'),
        germline = join(pa_source_dir, 'pcgr', 'pcgr_configuration_normal.toml')
    output:
        somatic = '{batch}/pcgr/input/{batch}-' + unique_id + '-somatic.toml',
        germline = '{batch}/pcgr/input/{batch}-' + unique_id + '-normal.toml'
    shell:
        'cp {input.somatic} {output.somatic} && cp {input.germline} {output.germline}'


##### Making tarballs

rule somatic_tar_gz:
    input:
        vcf = rules.pcgr_somatic_vcf.output.vcf,
        tbi = rules.pcgr_somatic_vcf.output.tbi,
        cns = rules.pcgr_cns.output[0],
        toml = rules.prep_tomls.output.somatic
    output:
        '{batch}/pcgr/input/{batch}-' + unique_id + '-somatic.tar.gz'
    params:
        basedir = '{batch}/pcgr/input/',
        vcf = lambda wc, input: basename(input.vcf),
        tbi = lambda wc, input: basename(input.tbi),
        cns = lambda wc, input: basename(input.cns),
        toml = lambda wc, input: basename(input.toml)
    shell:
        'tar -czf {output} -C {params.basedir} {params.vcf} {params.tbi} {params.cns} {params.toml}'

rule germline_tar_gz:
    input:
        vcf = rules.pcgr_germline_vcf.output.vcf,
        tbi = rules.pcgr_germline_vcf.output.tbi,
        toml = rules.prep_tomls.output.germline
    output:
        '{batch}/pcgr/input/{batch}-' + unique_id + '-normal.tar.gz'
    params:
        basedir = '{batch}/pcgr/input/',
        vcf = lambda wc, input: basename(input.vcf),
        tbi = lambda wc, input: basename(input.tbi),
        toml = lambda wc, input: basename(input.toml)
    shell:
        'tar -czf {output} -C {params.basedir} {params.vcf} {params.tbi} {params.toml}'


##### Uploading tarballs

upload_proxy = ''
if loc.name == 'spartan':
    upload_proxy = 'export HTTPS_PROXY=http://wwwproxy.unimelb.edu.au:8000; '


rule upload_somatic_to_pcgr:
    input:
        rules.somatic_tar_gz.output[0]
    output:
        '{batch}/pcgr/input/upload-somatic.done'
    shell:
        upload_proxy + 'aws s3 cp {input} s3://pcgr && touch {output}'

rule upload_germline_to_pcgr:
    input:
        rules.germline_tar_gz.output[0]
    output:
        '{batch}/pcgr/input/upload-normal.done'
    shell:
        upload_proxy + 'aws s3 cp {input} s3://pcgr && touch {output}'


rule download_pcgr:
    output:
        html = '{batch}/pcgr/{batch}-' + unique_id + '-{phenotype}.pcgr.html'
    params:
        targz_folder = '{batch}/work/pcgr/',
        targz_fname = '{batch}-' + unique_id + '-{phenotype}-output.tar.gz',
        untar_output_dirname = 'output_{batch}-' + unique_id + '-{phenotype}',
        final_output_folder = '{batch}/pcgr/'
    shell:
        upload_proxy + 'aws s3 cp s3://pcgr/{params.targz_fname} {params.targz_folder}'
        ' && tar -xzf {params.targz_folder}/{params.targz_fname} -C {params.targz_folder} '
        ' && mv {params.targz_folder}{params.untar_output_dirname}/* {params.final_output_folder}'


#############

rule pcgr_prep:
    input:
        expand(rules.somatic_tar_gz.output, batch=batch_by_name.keys()),
        expand(rules.germline_tar_gz.output, batch=batch_by_name.keys())

rule pcgr_upload:
    input:
       expand(rules.upload_somatic_to_pcgr.output, batch=batch_by_name.keys()),
       expand(rules.upload_germline_to_pcgr.output, batch=batch_by_name.keys())

rule pcgr:
    input:
       expand(rules.upload_somatic_to_pcgr.output, batch=batch_by_name.keys()),
       expand(rules.upload_germline_to_pcgr.output, batch=batch_by_name.keys())


rule pcgr_download:
    input:
        expand(rules.download_pcgr.output, phenotype=['somatic', 'normal'], batch=batch_by_name.keys())





