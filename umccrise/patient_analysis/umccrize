#!/usr/bin/env python
import os
import sys
from os.path import isfile, join, dirname, abspath
import click
from umccrise import patient_analysis
from ngs_utils.call_process import run
import subprocess


import locale
if 'UTF-8' not in locale.getlocale(locale.LC_ALL):
    locale.setlocale(locale.LC_ALL, 'en_AU.UTF-8')


@click.command()
@click.argument('bcbio_project', type=click.Path(exists=True))
@click.argument('rule', nargs=-1)
@click.option('-o', 'output_dir', type=click.Path())
@click.option('-j', 'jobs', default=1)
@click.option('-s', '--sample', 'sample')
@click.option('-s', '--batch', 'batch')
@click.option('-u', '--uid', '--uuid', 'unique_id')
@click.option('--unlock', is_flag=True)
def main(bcbio_project, rule=list(), output_dir=None, jobs=1, sample=None, batch=None, unique_id=None, unlock=False):
    rule = list(rule)

    bcbio_project = os.path.abspath(bcbio_project)

    conf = f'run_dir={bcbio_project}'

    if sample:
        conf += f' sample={sample}'
    if batch:
        conf += f' batch={batch}'

    if unique_id:
        conf += f' unique_id={unique_id}'
        rule.append('pcgr_download')

    if 'pcgr_download' in rule and not unique_id:
        sys.stderr.write(f'Error: when you run pcgr_download, provide the unique id with --uid option so umccrise can find the tarballs:\n')
        sys.stderr.write('\n')
        args = ' '.join(sys.argv)
        sys.stderr.write(f'    {args} --uid XXXXXX\n')
        sys.stderr.write('\n')
        sys.exit(1)

    output_dir = output_dir or 'umccrised'
    output_dir = abspath(output_dir)

    cmd = (f'snakemake ' +
        f'{" ".join(rule)} ' +
        f'--snakefile {join(patient_analysis.package_path(), "Snakefile")} ' +
        f'--printshellcmds ' +
        f'--directory {output_dir} ' +
        f'-j {jobs} ' +
        f'--config {conf} ' +
       (f'--unlock ' if unlock else '')
    )
    print(cmd)
    exit_code = subprocess.call(cmd, shell=True)
    if exit_code != 0:
        sys.stderr.write('--------\n')
        sys.stderr.write(f'Error running Umccrise: snakemake returned a non-zero status.\n')
        sys.exit(exit_code)

    # Cleanup
    work_dir = join(output_dir, 'work')
    # if isdir(work_dir):
    #     shutils.rmtree(work_dir)


if __name__ == '__main__':
    main()
