""" UMCCR post-bcbio patient analysis workflow
"""
import os
import sys
from os.path import join, abspath, dirname, isfile, basename, splitext
from ngs_utils.file_utils import splitext_plus
from ngs_utils.bcbio import BcbioProject
from ngs_utils.file_utils import add_suffix, get_ungz_gz
from ngs_utils.logger import critical
from python_utils.hpc import get_ref_file, get_loc


shell.executable("bash")
shell.prefix("")


pcgr_url = config.get('pcgr_url', 'ec2-13-55-18-20')
cov_by_phenotype = config.get('cov_by_phenotype', {'tumor': 30, 'normal': 10})  # For goleft regions coverage, use minimum coverage 10 for normal, 30 for tumor
threads_max = 32  # Use up to 32 cores at once, if available

run = BcbioProject(config.get('run_dir', abspath(os.getcwd())))
project_id = splitext(basename(run.bcbio_yaml_fpath))[0]


az300 = get_ref_file(run.genome_build, 'az300')
ref_fa = get_ref_file(run.genome_build)

# Batch objects index by tumor sample names
batch_by_name = {b.tumor.name: b for b in run.batch_by_name.values() if not b.is_germline()}
name = config.get('batch') or config.get('sample')
if name:
    selected_batch_by_name = {n: b for n, b in batch_by_name.items() if b.name == name or b.tumor.name == name}
    if len(selected_batch_by_name) == 0:
        critical(f'Error: could not find a batch or a sample with the name {name}. '
                 f'Known batches: {list(b.name for b in batch_by_name.values())}, '
                 f'known samples: {list(b.tumor.name for b in batch_by_name.values())}')
    batch_by_name = selected_batch_by_name


# Generating unique ID for PCGR tarballs
if 'unique_id' in config:
    unique_id = config['unique_id']
    print(f'Reusing unique ID for PCGR (for downloading): {unique_id}')
else:
    import uuid
    unique_id = str(uuid.uuid4().hex[:6])
    print(f'Creating new unique ID for PCGR: {unique_id}')


is_spartan = get_loc().name == 'spartan'
is_raijin = get_loc().name == 'raijin'
is_hpc = is_spartan or is_raijin
upload_proxy = ''
if is_spartan:
    upload_proxy = 'export HTTPS_PROXY=http://wwwproxy.unimelb.edu.au:8000; '


rule all:
    input: 'umccrised.progress'    # A trick to avoid duplicating all input paths in the top "all" rule which has to be defined on top.
    shell: 'rm {input}'            # We could just keep that redundant ".done" file, but better to remove it to avoid confusing the user.


include: "Snakefile.small_variants"
include: "Snakefile.coverage"
include: "Snakefile.structural"
include: "Snakefile.igv"
include: "Snakefile.pcgr"
include: "Snakefile.rmd"


rule copy_multiqc:  # {}
    input:
        join(run.date_dir, 'multiqc/multiqc_report.html')
    output:
        project_id + '-multiqc_report.html'
    shell:
        'cp {input} {output}'


## Additional information
# TODO: link it to MultiQC
rule copy_logs:  # {}
    input:
        join(run.date_dir, 'data_versions.csv'), 
        join(run.date_dir, 'programs.txt'), 
        run.config_dir
    output:
        'log/' + project_id + '-data_versions.csv',
        'log/' + project_id + '-programs.txt',
        'log/' + project_id + '-config'
    shell:
        'cp -r {input[0]} {output[0]} && cp -r {input[1]} {output[1]} && cp -r {input[2]} {output[2]}'


rule progress:
    input:  # Copy here inputs of the "milestone" rules (rules without output defined in the end of each Snakemake.* file)
        rules.copy_multiqc.output,
        rules.copy_logs.output,
        expand(rules.goleft_depth.output[0], phenotype=['tumor', 'normal'], batch=batch_by_name.keys()),
        expand(rules.goleft_plots.output[0], batch=batch_by_name.keys()),
        expand(rules.bedpe.output, batch=batch_by_name.keys()),
        expand(rules.ribbon.output, batch=batch_by_name.keys()),
        expand(rules.prep_sv_tsv.output, batch=batch_by_name.keys()),
        expand(rules.cnvkit_plot.output, batch=batch_by_name.keys()),
        expand(rules.somatic_vcf_pon_pass.output, batch=batch_by_name.keys()),
        expand(rules.germline_vcf_prep.output, batch=batch_by_name.keys()),
        expand(rules.sig_rmd.output[0], batch=batch_by_name.keys()),
        expand((rules.upload_somatic_to_pcgr.output if is_hpc else rules.somatic_tar_gz.output), batch=batch_by_name.keys()),
        expand((rules.upload_germline_to_pcgr.output if is_hpc else rules.germline_tar_gz.output), batch=batch_by_name.keys()),
        expand((rules.igv_upload.output if is_hpc else rules.igv_bam.output), phenotype=['tumor', 'normal'], batch=batch_by_name.keys()),
        (expand(rules.download_pcgr.output, phenotype=['somatic', 'normal'], batch=batch_by_name.keys()) if is_hpc else [])
    output:
        'umccrised.progress'
    shell:
        'touch {output}'
