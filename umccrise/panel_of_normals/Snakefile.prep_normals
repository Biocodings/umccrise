# Snakemake file for preparing PoN filtering

import os
import glob
import re
from umccrise.utils import get_loc

if get_loc().name == 'spartan':
    normal_by_name = dict(l.strip().split() for l in '''
MH17B001P004              /data/cephfs/punim0010/data/Results/Avner/MH17T001P004/archive/2017-07-27_final/2017-06-15_MH17T001P004/MH17B001P004-germline-ensemble-annotated.vcf.gz
MH17B001P013              /data/cephfs/punim0010/data/Results/Avner/archive/MH17T001P013/final/2017-06-15_MH17T001P013/MH17B001P013-germline-ensemble-annotated.vcf.gz
VPH52_Blood               /data/cephfs/punim0010/data/Results/Tothill-Research/VPH/2017-08-16_tothill_pilot/germline/VPH52_Blood-germline-ensemble-annotated.vcf.gz      
VPH54_Blood               /data/cephfs/punim0010/data/Results/Tothill-Research/VPH/2017-08-16_tothill_pilot/germline/VPH54_Blood-germline-ensemble-annotated.vcf.gz      
VPH56_Blood               /data/cephfs/punim0010/data/Results/Tothill-Research/VPH/2017-08-16_tothill_pilot/germline/VPH56_Blood-germline-ensemble-annotated.vcf.gz      
VPH58_Blood               /data/cephfs/punim0010/data/Results/Tothill-Research/VPH/2017-08-16_tothill_pilot/germline/VPH58_Blood-germline-ensemble-annotated.vcf.gz      
VPH59_Blood               /data/cephfs/punim0010/data/Results/Tothill-Research/VPH/2017-08-16_tothill_pilot/germline/VPH59_Blood-germline-ensemble-annotated.vcf.gz      
VPH61_Blood               /data/cephfs/punim0010/data/Results/Tothill-Research/VPH/2017-08-16_tothill_pilot/germline/VPH61_Blood-germline-ensemble-annotated.vcf.gz      
NA12878-1VD               /data/cephfs/punim0010/projects/Hsu_WGS_Validation/WGS-GiaB-merged/final/2017-11-13_giab-merged/UtahMormon-1-ensemble-annotated.vcf.gz
NA24631-1KC               /data/cephfs/punim0010/projects/Hsu_WGS_Validation/WGS-GiaB-merged/final/2017-11-13_giab-merged/HanChinese-4-ensemble-annotated.vcf.gz
NA24385-1LL               /data/cephfs/punim0010/projects/Hsu_WGS_Validation/WGS-GiaB-merged/final/2017-11-13_giab-merged/AshkenazimJew-1-ensemble-annotated.vcf.gz
MDx150891                 /data/cephfs/punim0010/projects/Hsu_WGS_Validation/WGS-ALLOCATE-MDx150892-merged/final/2017-07-07_WGS-ALLOCATE-MDx150892-merged/MDx150891-germline-ensemble-annotated.vcf.gz
COLO829Bld-CCR170091a     /data/cephfs/punim0010/projects/Hofmann_Catchup/catchup_colo829/2017-11-17_Final/2017-11-09_catchup_colo829/COLO829_normal-ensemble-annotated.vcf.gz
BriGibBld-PRJ170155_S3    /data/cephfs/punim0010/data/Results/Patients/BriGib/final/2017-10-20_brigibFFPE/BriGibBld-ensemble-annotated.vcf.gz
17MHP031Bld-CCR170089_S1  /data/cephfs/punim0010/data/Results/Avner/MH17B001P031/final/2017-09-19_17MHP031/17MHP031Bld-germline-ensemble-annotated.vcf.gz
MH17B001P010              /data/cephfs/punim0010/data/Results/Avner/MH17B001P010/final/2017-10-19_MH17B001P010/MH17B001P010-ensemble-annotated.vcf.gz
17MHP002Bld-CCR170002     /data/cephfs/punim0010/data/Results/Avner/MH17B001P002/final/2017-10-23_MH17B001P002/17MHP002Bld-ensemble-annotated.vcf.gz
WES013BL                  /data/cephfs/punim0010/projects/Hsu_WGS_Validation/WGS-WES013PF-merged/final/2017-07-17_WGS-WES013PF-merged/WES013PFBL-germline-ensemble-annotated.vcf.gz
WES012MVBL                /data/projects/punim0010/projects/Hsu_WGS_Validation/WGS-WES012MV-merged/final/2017-07-05_WGS-WES012MV-merged/WES012MVBL-germline-ensemble-annotated.vcf.gz
WES003KMBL                /data/projects/punim0010/projects/Hsu_WGS_Validation/WGS-WES003KM-merged/final/2017-06-19_AGRF15-00335_H23HJDMXX_WES003KM-merged/WES003KMBL-germline-ensemble-annotated.vcf.gz
'''.split('\n') if l.strip())

if get_loc().name == 'vlad':
    normal_by_name = {'tmp': '/Users/vsaveliev/Analysis/panel_of_normals/GRCh37/normals/MH17B001P004-germline-ensemble-annotated.vcf.gz'}

if 'normal' in config:
    normal_by_name = dict([config['normal'].split(':')])

def str_to_lua_variable_name(name):
    name = os.path.basename(name)
    name = name.replace('.vcf.gz', '')
    name = re.sub('[^0-9a-zA-Z_]', '_', name) # Remove invalid characters
    name = re.sub('^[^a-zA-Z_]+', '_', name)  # Remove leading characters until we find a letter or underscore
    return name

VCFANNO_ANNO = '''
[[annotation]]
file="{fname}"
fields=[""]
ops=["self"]
names=["{name}"]
'''

VCFANNO_POSTANNO = '''
[[postannotation]]
name="PoN_CNT"
fields=[{fields}]
op="lua:count_true({vars})"
type="Integer"

[[postannotation]]
fields=[{fields}]
op="delete"
'''

VCFANNO_LUA = '''
function count_true(...)
  local t = {...}
  local count = 0
  for i, v in pairs(t) do
    if v == true then
      count = count + 1
    end
  end
  return count
end
'''

rule all:
    input:
        lua = 'code.lua',
        toml = 'annotate_normals_vcfanno.toml'

rule copy_normal_vcfs:
    input:
        lambda wc: normal_by_name[wc.sample],
        lambda wc: normal_by_name[wc.sample] + '.tbi'
    output:
        'vcfs/{sample}.vcf.gz',
        'vcfs/{sample}.vcf.gz.tbi'
    shell:
        'cp {input[0]} {output[0]} ; cp {input[1]} {output[1]}'

rule prep_vcfanno:
    input:
        expand(rules.copy_normal_vcfs.output[0], sample=normal_by_name.keys())
    output:
        toml = 'annotate_normals_vcfanno.toml'
    run:
        fpaths = input
        with open(output[0], 'w') as out:
            for fp in fpaths:
                out.write(VCFANNO_ANNO.format(
                    fname=fp,
                    name=str_to_lua_variable_name(fp)))

            out.write(VCFANNO_POSTANNO.format(
                fields=', '.join('"' + str_to_lua_variable_name(fp) + '"' for fp in fpaths), 
                vars=', '.join(str_to_lua_variable_name(fp) for fp in fpaths)))

rule prep_lua:
    output:
        lua = 'code.lua'
    run:
        with open(output[0], 'w') as out:
            out.write(VCFANNO_LUA)


